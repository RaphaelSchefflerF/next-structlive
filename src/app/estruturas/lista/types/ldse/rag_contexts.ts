export interface ChallengeContext {
    title: string;
    objective: string;
    requirements: string[];
    examples?: string[];
    commonMistakes?: string[];
    evaluationCriteria?: string[];
}

// Contextos RAG para diferentes desafios de estruturas de dados
export const RAG_CONTEXTS = {
    LISTA_DINAMICA_SIMPLESMENTE_ENCADEADA: {
        title: 'Implementar Lista Din√¢mica Simplesmente Encadeada',
        objective:
            'Implemente uma Lista Din√¢mica Simplesmente Encadeada em Python com as opera√ß√µes b√°sicas: inserir no in√≠cio, inserir no fim, remover do in√≠cio, remover do fim, e exibir a lista.',
        requirements: [
            'Criar uma classe No com atributos dado e proximo',
            'Criar uma classe ListaDinamicaSimplesmenteEncadeada com ponteiros primeiro e ultimo',
            'Implementar m√©todo inserir_inicio(dado)',
            'Implementar m√©todo inserir_fim(dado)',
            'Implementar m√©todo remover_inicio()',
            'Implementar m√©todo remover_fim()',
            'Implementar m√©todo exibir()',
            'Tratar casos especiais (lista vazia, um √∫nico elemento)',
        ],
        examples: [
            'lista = ListaDinamicaSimplesmenteEncadeada()',
            'lista.inserir_inicio(10)',
            'lista.inserir_fim(20)',
            'lista.exibir() # Deve mostrar: 10 -> 20',
            'lista.remover_inicio()',
            'lista.exibir() # Deve mostrar: 20',
        ],
        commonMistakes: [
            'N√£o atualizar o ponteiro ultimo ao inserir o primeiro elemento',
            'N√£o verificar se a lista est√° vazia antes de remover',
            'N√£o atualizar os ponteiros corretamente ao remover o √∫ltimo elemento',
            'Vazamentos de mem√≥ria ao n√£o limpar refer√™ncias',
        ],
        evaluationCriteria: [
            'Implementa√ß√£o correta da classe No',
            'Gerenciamento adequado dos ponteiros primeiro e ultimo',
            'Tratamento correto de casos especiais',
            'Efici√™ncia das opera√ß√µes O(1) para inser√ß√£o/remo√ß√£o no in√≠cio',
            'Clareza e organiza√ß√£o do c√≥digo',
        ],
    },
};

// Fun√ß√£o para gerar prompt RAG contextualizado
export function generateRAGPrompt(
    context: ChallengeContext,
    userCode: string,
): string {
    return `
## CONTEXTO DO DESAFIO
**T√≠tulo:** ${context.title}

**Objetivo:** ${context.objective}

**Requisitos t√©cnicos:**
${context.requirements.map((req) => `- ${req}`).join('\n')}

${
    context.examples
        ? `
**Exemplos de uso esperado:**
${context.examples.map((ex) => `\`${ex}\``).join('\n')}
`
        : ''
}

${
    context.commonMistakes
        ? `
**Erros comuns a observar:**
${context.commonMistakes.map((mistake) => `- ${mistake}`).join('\n')}
`
        : ''
}

${
    context.evaluationCriteria
        ? `
**Crit√©rios de avalia√ß√£o:**
${context.evaluationCriteria.map((criteria) => `- ${criteria}`).join('\n')}
`
        : ''
}

## C√ìDIGO IMPLEMENTADO PELO ESTUDANTE
\`\`\`python
${userCode}
\`\`\`

## TAREFA DE AN√ÅLISE
Analise o c√≥digo fornecido considerando:
1. **Conformidade com requisitos**: O c√≥digo atende aos requisitos especificados?
2. **Implementa√ß√£o t√©cnica**: A implementa√ß√£o est√° correta e eficiente?
3. **Casos especiais**: Como o c√≥digo trata situa√ß√µes especiais (lista vazia, um elemento)?
4. **Erros comuns**: O c√≥digo evita os erros comuns mencionados?
5. **Boas pr√°ticas**: O c√≥digo segue boas pr√°ticas de programa√ß√£o?
6. **Sugest√µes de melhoria**: Quais melhorias espec√≠ficas podem ser feitas?

Forne√ßa uma an√°lise detalhada, construtiva e educativa em portugu√™s, incluindo:
- ‚úÖ **Pontos positivos** identificados
- ‚ö†Ô∏è **Pontos de aten√ß√£o** ou melhorias necess√°rias
- üöÄ **Sugest√µes avan√ßadas** para otimiza√ß√£o
- üí° **Dicas educativas** relacionadas ao conceito
`;
}
